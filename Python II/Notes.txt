########## ALIASES ##########
x = [1,2]; y = list(x); y.append(3); print(x ==y); print(x is y); print(x,y)
returns true, y is an alias of x (same memory object)

x = [1,2]; y = list(x); y.append(3); print(x ==y); print(x is y); print(x,y)
returns false, not the same list

Safe (not an alias):
y = list(x)
y = x[:]

########## 2D Lists ##########
x[0][1]     [sublist][element]

for i, j in list:     Unpack each sublist
    print(i, j)

x,y = y,x     Swaps variables without a third variable (unpacking)

from pprint import pprint     Neater printing of 2d lists

using an initializer list to populate a 2d list ends up aliasing the init list x number of times

########## TUPLES ##########
x = [1,2,3]; y = [4,5,6]; z = list(zip(x, y))     zip creates a list of tuples. Ensure both things are same length!

x = (1, -42, 138, 18); y = sorted(x)     sorts the tuple and returns a sorted list without modifying the original

reversed does the same, but... rEvErSeD

########## POSITIONAL ARGUMENTS ##########
def fn(*varname) varname is usually args
*varname receives all excess positional arguments and packs them into a tuple

if isinstance(x, type) where type is int, float, str, etc.
if isinstance(x, (type1, type2, ...) for multiple types     do not put type in quotes

x = [1,2,3,4]
func_name(x)  # sends one item (a list) to the function
func_name(*x)  # sends four integers to the function

########## ARGV ##########
from sys import argv
print(type(argv), argv)     argv is of type list. First item is always the file name. All items are strings

########## DICTIONARIES ##########
keys can be any immutable type (number, strings, tuples)
keys are hashed for quick lookup = much more efficient in some circumstances than list

dict{}
{'sun':1}
dict(sun = 1)

KeyError access exception if key does not exist
len gives number of k:v pairs
"in" works on keys only
"for" loop iterates over keys only
keys(), values(), items()
for i,j in dict.items():
    print(i,j)

########## ETC ##########
f"{x:.2f}"     two decimal places
x = [1,2,3]; y = [4,5,6]; z = list(zip(x, y))     zip creates a list of tuples. Ensure both things are same length!


